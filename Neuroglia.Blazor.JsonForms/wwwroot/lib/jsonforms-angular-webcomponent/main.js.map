{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.module.ts","./src/main.ts"],"sourcesContent":["import { createAjv, JsonFormsRendererRegistryEntry, JsonSchema } from '@jsonforms/core';\nimport {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  OnInit,\n  SimpleChange,\n} from '@angular/core';\nimport { JsonFormsAngularService, JsonForms } from '@jsonforms/angular';\nimport { angularMaterialRenderers } from '@jsonforms/angular-material';\nimport { Options } from 'ajv';\n\nconst stringType = typeof \"\";\n\n@Component({\n  selector: 'app-ng-jsonforms',\n  template: `<jsonforms-outlet *ngIf=\"schema\"></jsonforms-outlet>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [JsonFormsAngularService]\n})\nexport class AppComponent extends JsonForms implements OnChanges, OnInit {\n\n  @Input() options: Options = {\n    schemaId: 'id',\n    allErrors: true\n  };\n  @Input() override renderers: JsonFormsRendererRegistryEntry[] = angularMaterialRenderers;\n\n  constructor(\n    jsonformsService: JsonFormsAngularService\n  ) {\n    super(jsonformsService);\n  }\n  \n  override ngOnInit(): void {\n    this.ajv = createAjv(this.options);\n    if (!!this.schema) super.ngOnInit();\n  }\n  \n  override ngOnChanges(changes: SimpleChanges): void {\n    Object.entries(changes).forEach(([prop, entry]) => {\n      if (entry.currentValue !== entry.previousValue) {\n        if (typeof(entry.currentValue) === stringType) {\n          try {\n            entry.currentValue = JSON.parse(entry.currentValue);\n            if (prop !== 'options') {\n              (this as any)[prop] = entry.currentValue;\n            }\n          }\n          catch {\n            // ignore if the string cannot be deserialzed\n          }\n        }\n        if (prop === 'options') {\n          changes['ajv'] = new SimpleChange(\n            this.ajv,\n            createAjv(entry.currentValue),\n            false\n          );\n          this.ajv = changes['ajv'].currentValue;\n        }\n      }\n    });\n    if (!!changes['schema']?.firstChange) {\n      super.ngOnInit();\n    }\n    super.ngOnChanges(changes);\n  }\n\n}\n","import { Injector, NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { JsonFormsAngularMaterialModule } from '@jsonforms/angular-material';\nimport { JsonFormsModule } from '@jsonforms/angular';\nimport { createCustomElement } from '@angular/elements';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    JsonFormsModule,\n    JsonFormsAngularMaterialModule,\n  ],\n  schemas: [],\n  providers: []\n})\n\nexport class AppModule {\n  constructor(private injector: Injector) {}\n\n  ngDoBootstrap() {\n    const el = createCustomElement(AppComponent, { injector: this.injector });\n    customElements.define('ng-jsonforms', el);\n   }\n}\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["createAjv","SimpleChange","JsonFormsAngularService","JsonForms","angularMaterialRenderers","i0","stringType","AppComponent","constructor","jsonformsService","schemaId","allErrors","ngOnInit","ajv","options","schema","ngOnChanges","changes","Object","entries","forEach","prop","entry","currentValue","previousValue","JSON","parse","firstChange","selectors","inputs","renderers","features","decls","vars","consts","template","BrowserAnimationsModule","BrowserModule","JsonFormsAngularMaterialModule","JsonFormsModule","createCustomElement","AppModule","injector","ngDoBootstrap","el","customElements","define","declarations","imports","__NgCli_bootstrap_1","bootstrapModule","catch","err","console","error"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}